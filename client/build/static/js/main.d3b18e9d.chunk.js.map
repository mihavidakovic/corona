{"version":3,"sources":["List/ListItem.js","List/List.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","className","this","props","region","confirmed","deaths","recovered","React","Component","List","state","loading","data","lastUpdate","sort","column","direction","onSort","e","sortedData","a","b","nameA","toUpperCase","nameB","contractValue","reverse","setState","axios","get","process","then","res","newdata","onClick","onSortDeathsChange","map","item","index","key","id","App","useState","isReturningUser","localStorage","savedMode","JSON","parse","getItem","userPrefersDark","window","matchMedia","matches","getPrefColorScheme","getInitialMode","darkMode","setDarkMode","useEffect","setItem","stringify","class","data-href","data-layout","data-size","target","href","prevMode","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3b18e9d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class ListItem extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"listItem\">\n\t\t\t\t<div className=\"listItem__cell item__state\">\n\t\t\t\t\t<span>{this.props.region}</span> \n\t\t\t\t</div>\n\t\t\t\t<div className=\"listItem__cell item__confirmed\">{this.props.confirmed}</div>\n\t\t\t\t<div className=\"listItem__cell item__deaths\">{this.props.deaths}</div>\n\t\t\t\t<div className=\"listItem__cell item__recovered\">{this.props.recovered}</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react';\nimport axios from 'axios';\n\nimport ListItem from './ListItem.js';\n\nexport default class List extends React.Component {\n\tstate = {\n\t\tloading: true,\n\t\tdata: [],\n\t\tlastUpdate: \"\",\n\t\tsort: {\n\t\t\tcolumn: null,\n\t\t\tdirection: 'desc',\n\t\t},\n\t}\n\n\n\tcomponentDidMount() {\n\t\taxios.get(process.env.REACT_APP_BASE_URL + '/api/data/list')\n\t\t.then(res => {\n\t\t\tconst data = res.data.data;\n\t\t\tthis.setState({data});\n\t\t\tthis.setState({loading: false});\n\t\t\tthis.setState({lastUpdate: data[0][\"created_at\"]});\n\t\t});\n\t}\n\n\tonSort = (column) => (e) => {\n\t  const direction = this.state.sort.column ? (this.state.sort.direction === 'asc' ? 'desc' : 'asc') : 'desc';\n\t  const sortedData = this.state.data.sort((a, b) => {\n\t    if (column === 'region') {\n\t\t\tconst nameA = a.region.toUpperCase();\n\t\t\tconst nameB = b.region.toUpperCase();\n\n\t\t\tif (nameA < nameB) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (nameA > nameB) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t    } else if (column === 'confirmed') {\n\t\t\tconst nameA = a.confirmed;\n\t\t\tconst nameB = b.confirmed;\n\n\t\t\tif (nameA < nameB) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (nameA > nameB) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t    } else if (column === 'deaths') {\n\t\t\tconst nameA = a.deaths;\n\t\t\tconst nameB = b.deaths;\n\n\t\t\tif (nameA < nameB) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (nameA > nameB) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t    } else if (column === 'recovered') {\n\t\t\tconst nameA = a.recovered;\n\t\t\tconst nameB = b.recovered;\n\n\t\t\tif (nameA < nameB) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (nameA > nameB) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t    } else {\n\t    \treturn a.contractValue - b.contractValue;\n\t    }\n\n\t  });\n\n\t  if (direction === 'desc') {\n\t    sortedData.reverse();\n\t  }\n\n\t  this.setState({\n\t    data: sortedData,\n\t    sort: {\n\t      column,\n\t      direction,\n\t    }\n\t  });\n\t};\n\n\trender() {\n\t\tlet newdata = this.state.data;\n\n\t\tif (this.state.loading) {\n\t\t\treturn (\n\t\t\t\t<div className=\"list\">\n\t\t\t\t\t<div className=\"list__head\">\n\t\t\t\t\t\t<div className=\"list__head--state\"><span>Država</span></div>\n\t\t\t\t\t\t<div className=\"list__head--confirmed\"><span>Potrjenih</span></div>\n\t\t\t\t\t\t<div className=\"list__head--deaths\" onClick={this.onSortDeathsChange}>\n\t\t\t\t\t\t\t<span>Smrti</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"list__head--recovered\"><span>Okrevanih</span></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"loading\">\n\t\t\t\t\t\t<div className=\"loader\"></div>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"list\">\n\t\t\t\t\t<div className=\"list__head\">\n\t\t\t\t\t\t<div className=\"list__head--state\" onClick={this.onSort('region')}>\n\t\t\t\t\t\t\t<span>Država</span>\n\t\t\t\t\t\t\t<i className=\"fa fa-sort\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"list__head--confirmed\" onClick={this.onSort('confirmed')}>\n\t\t\t\t\t\t\t<span>Potrjenih</span>\n\t\t\t\t\t\t\t<i className=\"fa fa-sort\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"list__head--deaths\" onClick={this.onSort('deaths')}>\n\t\t\t\t\t\t\t<span>Smrti</span>\n\t\t\t\t\t\t\t<i className=\"fa fa-sort\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"list__head--recovered\" onClick={this.onSort('recovered')}>\n\t\t\t\t\t\t\t<span>Okrevanih</span>\n\t\t\t\t\t\t\t<i className=\"fa fa-sort\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"list__head--date\"><span>Posodobljeno</span></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"items\">\n\t\t\t\t\t\t{newdata.map((item, index) => \n\t\t\t\t\t\t\t<ListItem key={index}  id={item.id} region={item.region} confirmed={item.confirmed} deaths={item.deaths} recovered={item.recovered} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n}","import React from 'react';\n\nimport './assets/style/main.scss';\n\nimport List from './List/List.js';\n\n\nfunction App() {\n\tconst [darkMode, setDarkMode] = React.useState(getInitialMode());\n\n\n\tReact.useEffect(() => {\n\t\tlocalStorage.setItem('dark', JSON.stringify(darkMode));\n\t}, [darkMode]);\n\n\tfunction getInitialMode() {\n\t\tconst isReturningUser = \"dark\" in localStorage;\n\t\tconst savedMode = JSON.parse(localStorage.getItem('dark'));\n\t\tconst userPrefersDark = getPrefColorScheme();\n\t\t// if mode was saved -> dark / light\n\t\tif (isReturningUser) {\n\t\t\treturn savedMode;\n\t\t} else if (userPrefersDark) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\t// if preferred color scheme dark -> dark\n\t\t// otherwise -> light\n\n\t\treturn savedMode || false;\n\t}\n\n\tfunction getPrefColorScheme() {\n\t\tif (!window.matchMedia) return;\n\n\t\treturn window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\t}\n\n\treturn (\n\t\t<div className={darkMode ? \"App dark\" : \"App light\"}>\n\t\t\t<header className=\"main__header\">\n\t\t\t\t<div className=\"logo\">\n\t\t\t\t\t<h1>Koronavirus</h1>\n\t\t\t\t\t<h2>Podrobni podatki o posledicah virusa</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"share_div\">\n\t\t\t\t\t<div class=\"fb-share-button\" data-href=\"https://corona.vidakovic.si/\" data-layout=\"button\" data-size=\"large\"><a target=\"_blank\" href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fcorona.vidakovic.si%2F&amp;src=sdkpreparse\" class=\"fb-xfbml-parse-ignore\">Share</a></div>\n\t\t\t\t\t<a class=\"twitter-share-button\"\n\t\t\t\t\t\thref=\"https://twitter.com/intent/tweet?text=Podrobni podatki o koronavirusu\"\n\t\t\t\t\t\tdata-size=\"large\">\n\t\t\t\t\t\tTweet\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"mode\">\n\t\t\t\t\t<div className=\"mode__button\" onClick={() => setDarkMode(prevMode => !prevMode)}>\n\t\t\t\t\t\t<i className={darkMode ? \"fa fa-sun\" : \"fa fa-moon\"}></i>\n\t\t\t\t\t\t<span>{darkMode ? \"Svetli\" : \"Temni\"} način</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</header>\n\n\t\t\t<section>\n\t\t\t\t<header className=\"section__header\">\n\t\t\t\t\t<h3>Podatki</h3>\n\t\t\t\t\t<p className=\"data__update\">Posodobljeno 23.3.2020 00:27</p>\n\t\t\t\t</header>\n\t\t\t\t<List />\n\t\t\t</section>\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}