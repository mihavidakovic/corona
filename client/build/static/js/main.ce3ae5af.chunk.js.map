{"version":3,"sources":["List/List.js","App.js","serviceWorker.js","index.js"],"names":["sortTypes","up","class","fn","a","b","deaths","down","default","List","state","items","currentSort","onSortChange","nextSort","setState","console","log","axios","get","process","then","res","data","this","className","onClick","sort","map","item","region","length","confirmed","recovered","fromNow","locale","last_update","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2TAMMA,G,YAAY,CACjBC,GAAI,CACHC,MAAO,UACPC,GAAI,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,SAE5BC,KAAM,CACLL,MAAO,YACPC,GAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,OAASF,EAAEE,SAE5BE,QAAS,CACRN,MAAO,OACPC,GAAI,SAACC,EAAGC,GAAJ,OAAUD,MAIKK,E,2MACpBC,MAAQ,CACPC,MAAO,GACPC,YAAa,W,EAYdC,aAAe,WAAO,IAEjBC,EADIF,EAAgB,EAAKF,MAArBE,YAGY,SAAhBA,EAAwBE,EAAW,KACd,OAAhBF,EAAsBE,EAAW,UACjB,YAAhBF,IAA2BE,EAAW,QAE/C,EAAKC,SAAS,CACbH,YAAaE,IAGdE,QAAQC,IAAI,S,mFApBQ,IAAD,OACnBC,IAAMC,IAAIC,wCACTC,MAAK,SAAAC,GACL,IAAMX,EAAQW,EAAIC,KAAKA,KACvB,EAAKR,SAAS,CAACJ,e,+BAoBP,IACDC,EAAgBY,KAAKd,MAArBE,YACR,OACC,yBAAKa,UAAU,QACd,yBAAKA,UAAU,cACd,4CACA,yBAAKC,QAASF,KAAKX,cAClB,uCACA,uBAAGY,UAAS,iBAAYzB,EAAUY,GAAaV,UAEhD,mDACA,oDACA,8CAED,yBAAKuB,UAAU,SACb,YAAID,KAAKd,MAAMC,OAAOgB,KAAK3B,EAAUY,GAAaT,IAAIyB,KAAI,SAAAC,GAAI,OAC9D,yBAAKJ,UAAU,QACd,yBAAKA,UAAU,0BACd,8BAAOI,EAAKC,QADb,IAC6BD,EAAKnB,MAAMqB,OAAS,GAAK,mCAASF,EAAKnB,QAEpE,yBAAKe,UAAU,2BAA2BI,EAAKvB,QAC/C,yBAAKmB,UAAU,8BAA8BI,EAAKG,WAClD,yBAAKP,UAAU,8BAA8BI,EAAKI,WAClD,yBAAKR,UAAU,yBAAwB,kBAAC,IAAD,CAAQS,SAAO,EAACC,OAAO,MAAMN,EAAKO,wB,GAtD9CC,IAAMC,WCJzBC,MAVf,WAGC,OACC,yBAAKd,UAAU,OACd,kBAAC,EAAD,QCAiBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.ce3ae5af.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Moment from 'react-moment';\nimport 'moment/locale/sl';\nimport 'moment-timezone';\n\nconst sortTypes = {\n\tup: {\n\t\tclass: 'sort-up',\n\t\tfn: (a, b) => a.deaths - b.deaths\n\t},\n\tdown: {\n\t\tclass: 'sort-down',\n\t\tfn: (a, b) => b.deaths - a.deaths\n\t},\n\tdefault: {\n\t\tclass: 'sort',\n\t\tfn: (a, b) => a\n\t}\n};\n\nexport default class List extends React.Component {\n\tstate = {\n\t\titems: [],\n\t\tcurrentSort: 'default'\n\t}\n\n\n\tcomponentDidMount() {\n\t\taxios.get(process.env.REACT_APP_BASE_URL + '/api/data')\n\t\t.then(res => {\n\t\t\tconst items = res.data.data;\n\t\t\tthis.setState({items});\n\t\t});\n\t}\n\n\tonSortChange = () => {\n\t\tconst { currentSort } = this.state;\n\t\tlet nextSort;\n\n\t\tif (currentSort === 'down') nextSort = 'up';\n\t\telse if (currentSort === 'up') nextSort = 'default';\n\t\telse if (currentSort === 'default') nextSort = 'down';\n\n\t\tthis.setState({\n\t\t\tcurrentSort: nextSort\n\t\t});\n\n\t\tconsole.log(\"klik\");\n\t};\n\n\n\trender() {\n\t\tconst { currentSort } = this.state;\n\t\treturn (\n\t\t\t<div className=\"list\">\n\t\t\t\t<div className=\"list__head\">\n\t\t\t\t\t<div>Dr≈æava</div>\n\t\t\t\t\t<div onClick={this.onSortChange}>\n\t\t\t\t\t\t<span>Smrti</span>\n\t\t\t\t\t\t<i className={`fas fa-${sortTypes[currentSort].class}`} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>Potrjenih primerov</div>\n\t\t\t\t\t<div>Okrevanih pacientov</div>\n\t\t\t\t\t<div>Posodobljeno</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"items\">\n\t\t\t\t\t{[...this.state.items].sort(sortTypes[currentSort].fn).map(item => \n\t\t\t\t\t\t<div className=\"item\">\n\t\t\t\t\t\t\t<div className=\"item__cell item__state\">\n\t\t\t\t\t\t\t\t<span>{item.region}</span> {item.state.length > 0 && <span>/ {item.state}</span>}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"item__cell item__deaths\">{item.deaths}</div>\n\t\t\t\t\t\t\t<div className=\"item__cell item__confirmed\">{item.confirmed}</div>\n\t\t\t\t\t\t\t<div className=\"item__cell item__recovered\">{item.recovered}</div>\n\t\t\t\t\t\t\t<div className=\"item__cell item__date\"><Moment fromNow locale=\"sl\">{item.last_update}</Moment></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react';\n\nimport './assets/style/main.scss';\n\nimport List from './List/List.js';\n\n\nfunction App() {\n\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<List />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}