{"ast":null,"code":"\"use strict\";\n\nlet fileUtils = require(\"././util/fileUtils\");\n\nlet stringUtils = require(\"././util/stringUtils\");\n\nlet jsonUtils = require(\"././util/jsonUtils\");\n\nconst newLine = /\\r?\\n/;\nconst defaultFieldDelimiter = \";\";\n\nclass CsvToJson {\n  formatValueByType() {\n    this.printValueFormatByType = true;\n    return this;\n  }\n\n  fieldDelimiter(delimieter) {\n    this.delimiter = delimieter;\n    return this;\n  }\n\n  generateJsonFileFromCsv(fileInputName, fileOutputName) {\n    let jsonStringified = this.getJsonFromCsvStringified(fileInputName);\n    fileUtils.writeFile(jsonStringified, fileOutputName);\n  }\n\n  getJsonFromCsvStringified(fileInputName) {\n    let json = this.getJsonFromCsv(fileInputName);\n    let jsonStringified = JSON.stringify(json, undefined, 1);\n    jsonUtils.validateJson(jsonStringified);\n    return jsonStringified;\n  }\n\n  getJsonFromCsv(fileInputName) {\n    let parsedCsv = fileUtils.readFile(fileInputName);\n    return this.csvToJson(parsedCsv);\n  }\n\n  csvStringToJson(csvString) {\n    return this.csvToJson(csvString);\n  }\n\n  csvToJson(parsedCsv) {\n    let lines = parsedCsv.split(newLine);\n    let fieldDelimiter = this.getFieldDelimiter();\n    let headers = lines[0].split(fieldDelimiter);\n    let jsonResult = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      let currentLine = lines[i].split(fieldDelimiter);\n\n      if (stringUtils.hasContent(currentLine)) {\n        jsonResult.push(this.buildJsonResult(headers, currentLine));\n      }\n    }\n\n    return jsonResult;\n  }\n\n  getFieldDelimiter() {\n    if (this.delimiter) {\n      return this.delimiter;\n    }\n\n    return defaultFieldDelimiter;\n  }\n\n  buildJsonResult(headers, currentLine) {\n    let jsonObject = {};\n\n    for (let j = 0; j < headers.length; j++) {\n      let propertyName = stringUtils.trimPropertyName(headers[j]);\n      let value = currentLine[j];\n\n      if (this.printValueFormatByType) {\n        value = stringUtils.getValueFormatByType(currentLine[j]);\n      }\n\n      jsonObject[propertyName] = value;\n    }\n\n    return jsonObject;\n  }\n\n}\n\nmodule.exports = new CsvToJson();","map":{"version":3,"sources":["/Users/mihavidakovic/Desktop/Work/Personal/corona/node_modules/convert-csv-to-json/src/csvToJson.js"],"names":["fileUtils","require","stringUtils","jsonUtils","newLine","defaultFieldDelimiter","CsvToJson","formatValueByType","printValueFormatByType","fieldDelimiter","delimieter","delimiter","generateJsonFileFromCsv","fileInputName","fileOutputName","jsonStringified","getJsonFromCsvStringified","writeFile","json","getJsonFromCsv","JSON","stringify","undefined","validateJson","parsedCsv","readFile","csvToJson","csvStringToJson","csvString","lines","split","getFieldDelimiter","headers","jsonResult","i","length","currentLine","hasContent","push","buildJsonResult","jsonObject","j","propertyName","trimPropertyName","value","getValueFormatByType","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AAEA,MAAMG,OAAO,GAAG,OAAhB;AACA,MAAMC,qBAAqB,GAAG,GAA9B;;AAEA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,sBAAL,GAA8B,IAA9B;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,CAACC,UAAD,EAAa;AACzB,SAAKC,SAAL,GAAiBD,UAAjB;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,uBAAuB,CAACC,aAAD,EAAgBC,cAAhB,EAAgC;AACrD,QAAIC,eAAe,GAAG,KAAKC,yBAAL,CAA+BH,aAA/B,CAAtB;AACAb,IAAAA,SAAS,CAACiB,SAAV,CAAoBF,eAApB,EAAqCD,cAArC;AACD;;AAEDE,EAAAA,yBAAyB,CAACH,aAAD,EAAgB;AACvC,QAAIK,IAAI,GAAG,KAAKC,cAAL,CAAoBN,aAApB,CAAX;AACA,QAAIE,eAAe,GAAGK,IAAI,CAACC,SAAL,CAAeH,IAAf,EAAqBI,SAArB,EAAgC,CAAhC,CAAtB;AACAnB,IAAAA,SAAS,CAACoB,YAAV,CAAuBR,eAAvB;AACA,WAAOA,eAAP;AACD;;AAEDI,EAAAA,cAAc,CAACN,aAAD,EAAgB;AAC5B,QAAIW,SAAS,GAAGxB,SAAS,CAACyB,QAAV,CAAmBZ,aAAnB,CAAhB;AACA,WAAO,KAAKa,SAAL,CAAeF,SAAf,CAAP;AACD;;AAEDG,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,WAAO,KAAKF,SAAL,CAAeE,SAAf,CAAP;AACD;;AAEDF,EAAAA,SAAS,CAACF,SAAD,EAAY;AACnB,QAAIK,KAAK,GAAGL,SAAS,CAACM,KAAV,CAAgB1B,OAAhB,CAAZ;AACA,QAAIK,cAAc,GAAG,KAAKsB,iBAAL,EAArB;AACA,QAAIC,OAAO,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAerB,cAAf,CAAd;AAEA,QAAIwB,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAIE,WAAW,GAAGP,KAAK,CAACK,CAAD,CAAL,CAASJ,KAAT,CAAerB,cAAf,CAAlB;;AACA,UAAIP,WAAW,CAACmC,UAAZ,CAAuBD,WAAvB,CAAJ,EAAyC;AACvCH,QAAAA,UAAU,CAACK,IAAX,CAAgB,KAAKC,eAAL,CAAqBP,OAArB,EAA8BI,WAA9B,CAAhB;AACD;AACF;;AACD,WAAOH,UAAP;AACD;;AAEDF,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKpB,SAAT,EAAoB;AAClB,aAAO,KAAKA,SAAZ;AACD;;AACD,WAAON,qBAAP;AACD;;AAEDkC,EAAAA,eAAe,CAACP,OAAD,EAAUI,WAAV,EAAuB;AACpC,QAAII,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACG,MAA5B,EAAoCM,CAAC,EAArC,EAAyC;AACvC,UAAIC,YAAY,GAAGxC,WAAW,CAACyC,gBAAZ,CAA6BX,OAAO,CAACS,CAAD,CAApC,CAAnB;AAEA,UAAIG,KAAK,GAAGR,WAAW,CAACK,CAAD,CAAvB;;AACA,UAAI,KAAKjC,sBAAT,EAAiC;AAC/BoC,QAAAA,KAAK,GAAG1C,WAAW,CAAC2C,oBAAZ,CAAiCT,WAAW,CAACK,CAAD,CAA5C,CAAR;AACD;;AACDD,MAAAA,UAAU,CAACE,YAAD,CAAV,GAA2BE,KAA3B;AACD;;AACD,WAAOJ,UAAP;AACD;;AAlEa;;AAqEhBM,MAAM,CAACC,OAAP,GAAiB,IAAIzC,SAAJ,EAAjB","sourcesContent":["\"use strict\";\n\nlet fileUtils = require(\"././util/fileUtils\");\nlet stringUtils = require(\"././util/stringUtils\");\nlet jsonUtils = require(\"././util/jsonUtils\");\n\nconst newLine = /\\r?\\n/;\nconst defaultFieldDelimiter = \";\";\n\nclass CsvToJson {\n  formatValueByType() {\n    this.printValueFormatByType = true;\n    return this;\n  }\n\n  fieldDelimiter(delimieter) {\n    this.delimiter = delimieter;\n    return this;\n  }\n\n  generateJsonFileFromCsv(fileInputName, fileOutputName) {\n    let jsonStringified = this.getJsonFromCsvStringified(fileInputName);\n    fileUtils.writeFile(jsonStringified, fileOutputName);\n  }\n\n  getJsonFromCsvStringified(fileInputName) {\n    let json = this.getJsonFromCsv(fileInputName);\n    let jsonStringified = JSON.stringify(json, undefined, 1);\n    jsonUtils.validateJson(jsonStringified);\n    return jsonStringified;\n  }\n\n  getJsonFromCsv(fileInputName) {\n    let parsedCsv = fileUtils.readFile(fileInputName);\n    return this.csvToJson(parsedCsv);\n  }\n\n  csvStringToJson(csvString) {\n    return this.csvToJson(csvString);\n  }\n\n  csvToJson(parsedCsv) {\n    let lines = parsedCsv.split(newLine);\n    let fieldDelimiter = this.getFieldDelimiter();\n    let headers = lines[0].split(fieldDelimiter);\n\n    let jsonResult = [];\n    for (let i = 1; i < lines.length; i++) {\n      let currentLine = lines[i].split(fieldDelimiter);\n      if (stringUtils.hasContent(currentLine)) {\n        jsonResult.push(this.buildJsonResult(headers, currentLine));\n      }\n    }\n    return jsonResult;\n  }\n\n  getFieldDelimiter() {\n    if (this.delimiter) {\n      return this.delimiter;\n    }\n    return defaultFieldDelimiter;\n  }\n\n  buildJsonResult(headers, currentLine) {\n    let jsonObject = {};\n    for (let j = 0; j < headers.length; j++) {\n      let propertyName = stringUtils.trimPropertyName(headers[j]);\n\n      let value = currentLine[j];\n      if (this.printValueFormatByType) {\n        value = stringUtils.getValueFormatByType(currentLine[j]);\n      }\n      jsonObject[propertyName] = value;\n    }\n    return jsonObject;\n  }\n}\n\nmodule.exports = new CsvToJson();\n"]},"metadata":{},"sourceType":"script"}