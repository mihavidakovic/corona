{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/var/www/corona.vidakovic.si/html/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/var/www/corona.vidakovic.si/html/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar fileUtils = require(\"././util/fileUtils\");\n\nvar stringUtils = require(\"././util/stringUtils\");\n\nvar jsonUtils = require(\"././util/jsonUtils\");\n\nvar newLine = /\\r?\\n/;\nvar defaultFieldDelimiter = \";\";\n\nvar CsvToJson =\n/*#__PURE__*/\nfunction () {\n  function CsvToJson() {\n    _classCallCheck(this, CsvToJson);\n  }\n\n  _createClass(CsvToJson, [{\n    key: \"formatValueByType\",\n    value: function formatValueByType() {\n      this.printValueFormatByType = true;\n      return this;\n    }\n  }, {\n    key: \"fieldDelimiter\",\n    value: function fieldDelimiter(delimieter) {\n      this.delimiter = delimieter;\n      return this;\n    }\n  }, {\n    key: \"generateJsonFileFromCsv\",\n    value: function generateJsonFileFromCsv(fileInputName, fileOutputName) {\n      var jsonStringified = this.getJsonFromCsvStringified(fileInputName);\n      fileUtils.writeFile(jsonStringified, fileOutputName);\n    }\n  }, {\n    key: \"getJsonFromCsvStringified\",\n    value: function getJsonFromCsvStringified(fileInputName) {\n      var json = this.getJsonFromCsv(fileInputName);\n      var jsonStringified = JSON.stringify(json, undefined, 1);\n      jsonUtils.validateJson(jsonStringified);\n      return jsonStringified;\n    }\n  }, {\n    key: \"getJsonFromCsv\",\n    value: function getJsonFromCsv(fileInputName) {\n      var parsedCsv = fileUtils.readFile(fileInputName);\n      return this.csvToJson(parsedCsv);\n    }\n  }, {\n    key: \"csvStringToJson\",\n    value: function csvStringToJson(csvString) {\n      return this.csvToJson(csvString);\n    }\n  }, {\n    key: \"csvToJson\",\n    value: function csvToJson(parsedCsv) {\n      var lines = parsedCsv.split(newLine);\n      var fieldDelimiter = this.getFieldDelimiter();\n      var headers = lines[0].split(fieldDelimiter);\n      var jsonResult = [];\n\n      for (var i = 1; i < lines.length; i++) {\n        var currentLine = lines[i].split(fieldDelimiter);\n\n        if (stringUtils.hasContent(currentLine)) {\n          jsonResult.push(this.buildJsonResult(headers, currentLine));\n        }\n      }\n\n      return jsonResult;\n    }\n  }, {\n    key: \"getFieldDelimiter\",\n    value: function getFieldDelimiter() {\n      if (this.delimiter) {\n        return this.delimiter;\n      }\n\n      return defaultFieldDelimiter;\n    }\n  }, {\n    key: \"buildJsonResult\",\n    value: function buildJsonResult(headers, currentLine) {\n      var jsonObject = {};\n\n      for (var j = 0; j < headers.length; j++) {\n        var propertyName = stringUtils.trimPropertyName(headers[j]);\n        var value = currentLine[j];\n\n        if (this.printValueFormatByType) {\n          value = stringUtils.getValueFormatByType(currentLine[j]);\n        }\n\n        jsonObject[propertyName] = value;\n      }\n\n      return jsonObject;\n    }\n  }]);\n\n  return CsvToJson;\n}();\n\nmodule.exports = new CsvToJson();","map":{"version":3,"sources":["/var/www/corona.vidakovic.si/html/client/node_modules/convert-csv-to-json/src/csvToJson.js"],"names":["fileUtils","require","stringUtils","jsonUtils","newLine","defaultFieldDelimiter","CsvToJson","printValueFormatByType","delimieter","delimiter","fileInputName","fileOutputName","jsonStringified","getJsonFromCsvStringified","writeFile","json","getJsonFromCsv","JSON","stringify","undefined","validateJson","parsedCsv","readFile","csvToJson","csvString","lines","split","fieldDelimiter","getFieldDelimiter","headers","jsonResult","i","length","currentLine","hasContent","push","buildJsonResult","jsonObject","j","propertyName","trimPropertyName","value","getValueFormatByType","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAMG,OAAO,GAAG,OAAhB;AACA,IAAMC,qBAAqB,GAAG,GAA9B;;IAEMC,S;;;;;;;;;wCACgB;AAClB,WAAKC,sBAAL,GAA8B,IAA9B;AACA,aAAO,IAAP;AACD;;;mCAEcC,U,EAAY;AACzB,WAAKC,SAAL,GAAiBD,UAAjB;AACA,aAAO,IAAP;AACD;;;4CAEuBE,a,EAAeC,c,EAAgB;AACrD,UAAIC,eAAe,GAAG,KAAKC,yBAAL,CAA+BH,aAA/B,CAAtB;AACAV,MAAAA,SAAS,CAACc,SAAV,CAAoBF,eAApB,EAAqCD,cAArC;AACD;;;8CAEyBD,a,EAAe;AACvC,UAAIK,IAAI,GAAG,KAAKC,cAAL,CAAoBN,aAApB,CAAX;AACA,UAAIE,eAAe,GAAGK,IAAI,CAACC,SAAL,CAAeH,IAAf,EAAqBI,SAArB,EAAgC,CAAhC,CAAtB;AACAhB,MAAAA,SAAS,CAACiB,YAAV,CAAuBR,eAAvB;AACA,aAAOA,eAAP;AACD;;;mCAEcF,a,EAAe;AAC5B,UAAIW,SAAS,GAAGrB,SAAS,CAACsB,QAAV,CAAmBZ,aAAnB,CAAhB;AACA,aAAO,KAAKa,SAAL,CAAeF,SAAf,CAAP;AACD;;;oCAEeG,S,EAAW;AACzB,aAAO,KAAKD,SAAL,CAAeC,SAAf,CAAP;AACD;;;8BAESH,S,EAAW;AACnB,UAAII,KAAK,GAAGJ,SAAS,CAACK,KAAV,CAAgBtB,OAAhB,CAAZ;AACA,UAAIuB,cAAc,GAAG,KAAKC,iBAAL,EAArB;AACA,UAAIC,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAeC,cAAf,CAAd;AAEA,UAAIG,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAIE,WAAW,GAAGR,KAAK,CAACM,CAAD,CAAL,CAASL,KAAT,CAAeC,cAAf,CAAlB;;AACA,YAAIzB,WAAW,CAACgC,UAAZ,CAAuBD,WAAvB,CAAJ,EAAyC;AACvCH,UAAAA,UAAU,CAACK,IAAX,CAAgB,KAAKC,eAAL,CAAqBP,OAArB,EAA8BI,WAA9B,CAAhB;AACD;AACF;;AACD,aAAOH,UAAP;AACD;;;wCAEmB;AAClB,UAAI,KAAKrB,SAAT,EAAoB;AAClB,eAAO,KAAKA,SAAZ;AACD;;AACD,aAAOJ,qBAAP;AACD;;;oCAEewB,O,EAASI,W,EAAa;AACpC,UAAII,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACG,MAA5B,EAAoCM,CAAC,EAArC,EAAyC;AACvC,YAAIC,YAAY,GAAGrC,WAAW,CAACsC,gBAAZ,CAA6BX,OAAO,CAACS,CAAD,CAApC,CAAnB;AAEA,YAAIG,KAAK,GAAGR,WAAW,CAACK,CAAD,CAAvB;;AACA,YAAI,KAAK/B,sBAAT,EAAiC;AAC/BkC,UAAAA,KAAK,GAAGvC,WAAW,CAACwC,oBAAZ,CAAiCT,WAAW,CAACK,CAAD,CAA5C,CAAR;AACD;;AACDD,QAAAA,UAAU,CAACE,YAAD,CAAV,GAA2BE,KAA3B;AACD;;AACD,aAAOJ,UAAP;AACD;;;;;;AAGHM,MAAM,CAACC,OAAP,GAAiB,IAAItC,SAAJ,EAAjB","sourcesContent":["\"use strict\";\n\nlet fileUtils = require(\"././util/fileUtils\");\nlet stringUtils = require(\"././util/stringUtils\");\nlet jsonUtils = require(\"././util/jsonUtils\");\n\nconst newLine = /\\r?\\n/;\nconst defaultFieldDelimiter = \";\";\n\nclass CsvToJson {\n  formatValueByType() {\n    this.printValueFormatByType = true;\n    return this;\n  }\n\n  fieldDelimiter(delimieter) {\n    this.delimiter = delimieter;\n    return this;\n  }\n\n  generateJsonFileFromCsv(fileInputName, fileOutputName) {\n    let jsonStringified = this.getJsonFromCsvStringified(fileInputName);\n    fileUtils.writeFile(jsonStringified, fileOutputName);\n  }\n\n  getJsonFromCsvStringified(fileInputName) {\n    let json = this.getJsonFromCsv(fileInputName);\n    let jsonStringified = JSON.stringify(json, undefined, 1);\n    jsonUtils.validateJson(jsonStringified);\n    return jsonStringified;\n  }\n\n  getJsonFromCsv(fileInputName) {\n    let parsedCsv = fileUtils.readFile(fileInputName);\n    return this.csvToJson(parsedCsv);\n  }\n\n  csvStringToJson(csvString) {\n    return this.csvToJson(csvString);\n  }\n\n  csvToJson(parsedCsv) {\n    let lines = parsedCsv.split(newLine);\n    let fieldDelimiter = this.getFieldDelimiter();\n    let headers = lines[0].split(fieldDelimiter);\n\n    let jsonResult = [];\n    for (let i = 1; i < lines.length; i++) {\n      let currentLine = lines[i].split(fieldDelimiter);\n      if (stringUtils.hasContent(currentLine)) {\n        jsonResult.push(this.buildJsonResult(headers, currentLine));\n      }\n    }\n    return jsonResult;\n  }\n\n  getFieldDelimiter() {\n    if (this.delimiter) {\n      return this.delimiter;\n    }\n    return defaultFieldDelimiter;\n  }\n\n  buildJsonResult(headers, currentLine) {\n    let jsonObject = {};\n    for (let j = 0; j < headers.length; j++) {\n      let propertyName = stringUtils.trimPropertyName(headers[j]);\n\n      let value = currentLine[j];\n      if (this.printValueFormatByType) {\n        value = stringUtils.getValueFormatByType(currentLine[j]);\n      }\n      jsonObject[propertyName] = value;\n    }\n    return jsonObject;\n  }\n}\n\nmodule.exports = new CsvToJson();\n"]},"metadata":{},"sourceType":"script"}